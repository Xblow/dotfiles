priority -50

##############
# MATH STUFF #
##############

global !p

def create_matrix(snip):
	mx_type = snip.buffer[snip.line].strip()[0]
	row_len = int(''.join(s for s in snip.buffer[snip.line] if s.isdigit()))
	old_spacing = snip.buffer[snip.line][:snip.buffer[snip.line].rfind(' ') + 1]

	snip.buffer[snip.line] = ''

	final_str = old_spacing + "\\begin{" + mx_type + "matrix}\n"

	for i in range(row_len):
		final_str += old_spacing + ' '
		final_str += " & ".join(['$' + str(i*row_len + j + 1) for j in range(row_len)])
		final_str += " \\\\\\\n"

	final_str += old_spacing + "\\end{" + mx_type + "matrix}$0"

	snip.expand_anon(final_str)

def create_vector(snip):
	col_len = int(''.join(s for s in snip.buffer[snip.line] if s.isdigit()))
	old_spacing = snip.buffer[snip.line][:snip.buffer[snip.line].rfind(' ') + 1]

	snip.buffer[snip.line] = ''

	final_str = old_spacing + "\\begin{pmatrix}\n"

	for i in range(col_len):
		final_str += old_spacing + '$' + str(i+1)
		final_str += " \\\\\\\n"

	final_str += old_spacing + "\\end{pmatrix}$0"

	snip.expand_anon(final_str)
endglobal

pre_expand "create_matrix(snip)"
snippet "[pbBvV]mx(\d)" "Generate n x n pmatrix" rA
endsnippet

pre_expand "create_vector(snip)"
snippet "vec(\d)" "Generate d-dimensional vector" rA
endsnippet

snippet eq "Equation" b
\begin{equation}
	${1:${VISUAL}}
\end{equation}$0
endsnippet

snippet eq* "Equation without number" b
\begin{equation*}
	${1:${VISUAL}}
\end{equation*}$0
endsnippet

#snippet eqa "Equation array" b
#\begin{eqnarray}
#	$1 & $2 & $0
#\end{eqnarray}
#endsnippet
#
#snippet eqa* "Equation array without numbers" b
#\begin{eqnarray*}
#	$1 & $2 & $0
#\end{eqnarray*}
#endsnippet

snippet ar "Array" b
\begin{array}
	${1:${VISUAL}}
\end{array}
endsnippet

snippet ar* "Array without number" b
\begin{array*}
	${1:${VISUAL}}
\end{array*}
endsnippet

snippet al "align" b
\begin{align}
	${1:${VISUAL}}
\end{align}
endsnippet

snippet al* "Array without number" b
\begin{align*}
	${1:${VISUAL}}
\end{align*}
endsnippet

# snippet frac* "Flat Fraction" wA
# \flatfrac{${1:${VISUAL:1}}}{${2:denom}}
# endsnippet


# Snippets that use isMath()

global !p
def isMath():
    return vim.eval('vimtex#syntax#in_mathzone()') == '1'

def isComment():
    return vim.eval('vimtex#syntax#in_comment()') == '1'

def env(name):
    [x,y] = vim.eval("vimtex#env#is_inside('" + name + "')")
    return x != '0' and x != '0'
endglobal

# context "isMath()"
# snippet sr "^2" iA
# ^2
# endsnippet

# global !p
# texMathZones = ['texMathZone'+x for x in ['A', 'AS', 'B', 'BS', 'C', 'CS', 'D', 'DS', 'V', 'W', 'X', 'Y', 'Z']]
# # If you have http://www.drchip.org/astronaut/vim/vbafiles/amsmath.vba.gz,
# # you want to add:
# texMathZones += ['texMathZone'+x for x in ['E', 'ES', 'F', 'FS', 'G', 'GS', 'H', 'HS', 'I', 'IS', 'J', 'JS', 'K', 'KS', 'L', 'LS']]
# texIgnoreMathZones = ['texMathText']
#
# texMathZoneIds = vim.eval('map('+str(texMathZones)+", 'hlID(v:val)')")
# texIgnoreMathZoneIds = vim.eval('map('+str(texIgnoreMathZones)+", 'hlID(v:val)')")
#
# def isMath():
#     synstackids = vim.eval("synstack(line('.'), col('.') - (col('.')>=2 ? 1 : 0))")
#     if not set(texIgnoreMathZoneIds).isdisjoint(synstackids):
#         return False
#     return not set(texMathZoneIds).isdisjoint(synstackids)
#     # isdisjoint() can short-circuit as soon as a match is found
# endglobal

priority 100

# Textmode synippets requiring isMath()

# snippet ^ "Textmode Superscript" "not isMath()" eAi
# \textsuperscript{${1:${VISUAL}}}$0
# endsnippet

# Mathmode snippets

# dots
priority 100
#snippet ... "dots" A
#\dots
#endsnippet

snippet ... "ldots" A
\ldots
endsnippet

snippet +- "plus minus" Aw
\pm
endsnippet

snippet // "fraction" "isMath()" eAi
\frac{${1:${VISUAL:1}}}{${2:2}}$0
endsnippet

# --- (in)equalities ---
snippet == "alignment equation" "isMath()" eA
&=
endsnippet

snippet ^= "stacking something on equality" "isMath()" eA
\stackrel{$1}{=}$0
endsnippet

snippet != "does not equal" "isMath()" eA
\neq
endsnippet

snippet <= "less than or equal" "isMath()" eA
\leq
endsnippet

snippet >= "greater than or equal" "isMath()" eAw
\geq
endsnippet

snippet >> "much greater than" "isMath()" eA
\gg
endsnippet

snippet << "much less than" "isMath()" eA
\ll
endsnippet

snippet ~ "order of" "isMath()" eA
\sim
endsnippet

snippet def "defined to be" "isMath()" eAw
\coloneqq
endsnippet

snippet set "set" "isMath()" ew
\\{$1\\}$0
endsnippet

snippet span "span" "isMath()" eAw
\text{Span}_{\mathbb{${1:R}}}\left\\{$2\right\\}$0
endsnippet

snippet map "Function Definition" b
\begin{equation}
	\begin{gathered}
		${1:f} \colon \\\\
		\qquad
	\end{gathered}
	\begin{gathered}
		${2:domain} \\\\
		${4:member}
	\end{gathered}
	\quad
	\begin{gathered}
		\to \\\\
		\mapsto
	\end{gathered}
	\quad
	\begin{gathered}
		${3:codomain} \\\\
		${5:image of member}
	\end{gathered}
\end{equation}$0
endsnippet

snippet sub "subscipt text" "isMath()" ei
_{\text{$1}}$0
endsnippet

snippet cases "cases" "isMath()" be
\begin{cases}
	$1, & \\text{if } $2 \\\\
	$3, & \\text{if } $4
\end{cases}
endsnippet

#snippet hal "one half" "isMath()" eAw
#\frac{1}{2}
#endsnippet

snippet int "Integration" "isMath()" ew
\int_{${1:-\infty}}^{${2:\infty}}${VISUAL}\\${3:d}{${5:x}}\, $0
endsnippet

# snippet ppp "momentum" "isMath()" eiA
# _{\vb{p}}
# endsnippet
#
# snippet ppi "momentum" "isMath()" eiA
# _{\vb{p}'}
# endsnippet
#
# snippet qqq "momentum" "isMath()" eiA
# _{\vb{q}}
# endsnippet
#
# snippet qqi "momentum" "isMath()" eiA
# _{\vb{q}'}
# endsnippet

snippet 'kk(\d)' "labeled momentum" "isMath()" eiAr
_{\vb{k}_`!p snip.rv=match.group(1)`}
endsnippet

snippet 'pp(\d)' "labeled momentum" "isMath()" eiAr
_{\vb{p}_`!p snip.rv=match.group(1)`}
endsnippet

snippet wick "wick contraction" "isMath()" eAw
\wick{\c$1 \c$2}
endsnippet

snippet bdel "normalised delta" "isMath()" eAw
\bdelta^${1:4}($2)
endsnippet

priority 50

snippet under "underbrace" "isMath()" eAw
\underbrace{${1:${VISUAL}}}_{\mathclap{$2}}
endsnippet

snippet over "overbrace" "isMath()" eAw
\overbrace{${1:${VISUAL}}}^{\mathclap{$2}}
endsnippet

snippet __ "subscript" "isMath()" eAi
_{${1:${VISUAL}}}$0
endsnippet

snippet ^^ "superscript" "isMath()" eAi
^{${1:${VISUAL}}}$0
endsnippet

snippet tt "text" "isMath()" weA
\text{${1:${VISUAL}}}$0
endsnippet

# Binary operators

snippet xx "times" "isMath()" weA
\times
endsnippet

snippet oo "composition" "isMath()" weA
\circ
endsnippet

snippet ww "wedge product" "isMath()" weA
\wedge
endsnippet

snippet bb "box" "isMath()" weA
\Box
endsnippet

snippet cc "dot product" "isMath()" Awe
\cdot
endsnippet

# snippet ** "dot product" "isMath()" A
# \cdot
# endsnippet
#
snippet ss "hodge star" "isMath()" Awe
\star
endsnippet

snippet opp "direct sum" "isMath()" Awe
\oplus
endsnippet

snippet oxx "direct product" "isMath()" Awe
\otimes
endsnippet

# Summation-like symbols

snippet Oxx "big direct product" "isMath()" Awe
\bigotimes_{$1}$2
endsnippet

snippet Opp "big direct sum" "isMath()" Awe
\bigoplus_{$1}$2
endsnippet

snippet SS "summation" "isMath()" Awe
\sum_{${1:i=1}}^{${2:\infty}}$0
endsnippet

snippet sum "basic sum" "isMath()" Awe
\sum$0
endsnippet

snippet '([^\\])text' "inserted text" "isMath()" Are
`!p snip.rv=match.group(0)[0]`\text{$1}$0
endsnippet

# Derivatives

priority 100

snippet rdv "differentiation evaluated" "isMath()" ewA
\left.\dv[$3]{${1:${VISUAL}}}{${2:t}}\right\rvert_{$4}$0
endsnippet

priority 50

snippet rpdv "partial differentiation evaluated" "isMath()" ewA
\left.\pdv[$3]{${1:${VISUAL}}}{${2:t}}\right\rvert_{$3}$0
endsnippet

snippet dv "differentiation" "isMath()" ewA
\dv{${1:${VISUAL}}}{${2:t}}$0
endsnippet

snippet "(n|\d)dv" "multiple differentiation" "isMath()" eAr
\dv[`!p snip.rv=match.group(1)`]{${1:${VISUAL}}}{${2:t}}$0
endsnippet

snippet pdv "partial differentiation" "isMath()" ewA
\frac{\partial ${1:${VISUAL:x^{\\mu}}}}{\partial ${2:t}}$0
endsnippet

snippet fpdv "flat partial differentiation" "isMath()" ewA
\flatfrac{\partial ${1:${VISUAL}}}{\partial ${2:t}}$0
endsnippet

snippet fdv "functional differentiation" "isMath()" ewA
\frac{\delta ${1:${VISUAL}}}{\delta $2}$0
endsnippet

#snippet g( "single bracket" "isMath()" ewA
#(
#endsnippet

# Differentials

snippet d "differential measure" "isMath()" we
\dd[${2:}]{${1:x}}$0
endsnippet

snippet bdd "barred measure" "isMath()" ewA
\bdd[${1:4}]{${2:k}}$0
endsnippet

snippet rdd "relativistic measure" "isMath()" ewA
\frac{\bdd[3]{${1:p}}}{\sqrt{2E_{\vb{$1}}}}$0
endsnippet

snippet pdd "path integral measure" "isMath()" ewA
\pdd{${1:\phi}}$0
endsnippet

snippet sqrt "square root" "isMath()" ewA
\sqrt{${1:${VISUAL}}}$0
endsnippet

snippet ind "tensor indices" "isMath()" ewA
\indices{$1}$0
endsnippet

# snippet lim "limes" "isMath()" ewA
# \lim_{${1:n} \to ${2:\infty}} \left\\{ $3 \right\\}
# endsnippet

snippet par "differential operator" "isMath()" ewA
\partial
endsnippet

# snippet dag "dagger" "isMath()" ewA
# snippet '[^\]dag' "dagger" "isMath()" ewrA
# \dagger
# endsnippet

# snippet '[A-Za-z]herm' "hermitian conjugation (dagger)" "isMath()" erA
# `!p snip.rv=match.group(1)`^\dagger $0
# endsnippet

# snippet nab "nabla" "isMath()" ewA
# \nabla
# endsnippet

snippet inf "infinity" "isMath()" eAw
\infty
endsnippet

snippet 'sl([A-Za-z])' "slashed vector" "isMath()" erw
\slashed{`!p snip.rv=match.group(1)`}$0
endsnippet

snippet sp "scalar product" "isMath()" ewA
(${1:a}\cdot ${2:b})$0
endsnippet

# functions

snippet frac "Fraction" "isMath()" weA
\frac{${1:${VISUAL:1}}}{${2:denom}}
endsnippet

snippet cos "cosine" "isMath()" Aew
\cos$0
endsnippet

snippet sin "sine" "isMath()" Aew
\sin$0
endsnippet

snippet cs "cosin" "isMath()" ew
\cos($1)$0
endsnippet

snippet ch "cosin hyperbolicus" "isMath()" ew
\cosh($1)$0
endsnippet

snippet tg "tangens" "isMath()" ew
\tan($1)$0
endsnippet

snippet th "tangens hyperbolicus" "isMath()" ew
\tanh($1)$0
endsnippet

snippet sn "sin" "isMath()" ew
\sin($1)$0
endsnippet

snippet sh "sinus hyperbolicus" "isMath()" ew
\sin($1)$0
endsnippet

snippet ex "exponential" "isMath()" ew
\exp($1)$0
endsnippet

# arrows
global !p
arrows = {
  "<": "leftarrow",
  "x>": "xrightarrow",
  "Le": "Leftarrow",
  ">": "rightarrow",
  "Ri": "Rightarrow",
  "lr": "leftrightarrow",
  "Lr": "Leftrightarrow",
  "up": "uparrow",
  "Up": "Uparrow",
  "do": "downarrow",
  "Do": "Downarrow",
  "Ud": "Updownarrow",
  "ne": "nearrow",
  "nw": "nwarrow",
  "se": "searrow",
  "sw": "swarrow",
}
endglobal

priority 0
snippet "-([a-zA-Z><]{1,2})" "arrows with hyphen" "isMath()" eiAr
`!p
if match.group(1) not in arrows.keys():
  snip.rv=match.group(0)
else:
  arrow=arrows[match.group(1)]
  snip.rv="\\"+arrow
`
endsnippet

# snippet ( "parentheses" iA
# (${1:${VISUAL}})$0
# endsnippet

# snippet { "braces" iA
# {${1:${VISUAL}}}$0
# endsnippet

# snippet [ "brackets" iA
# [${1:${VISUAL}}]$0
# endsnippet

snippet <> "angular brackets" iA
\langle ${1:${VISUAL}} \rangle$0
endsnippet

priority 1

snippet lr( "left( right)" wA
\left( ${1:${VISUAL}} \right)
endsnippet

snippet (( "left( right)" wA
\left( ${1:${VISUAL}} \right)
endsnippet

snippet [[ "left[ right]" wA
\left[ ${1:${VISUAL}} \right]
endsnippet

snippet lr| "left| right|" wA
\left| ${1:${VISUAL}} \right|
endsnippet

snippet lr{ "left\{ right\}" wA
\left\\{ ${1:${VISUAL}} \right\\}
endsnippet

snippet lr[ "left[ right]" wA
\left[ ${1:${VISUAL}} \right]
endsnippet

snippet lr< "left< right>" wA
\left\langle ${1:${VISUAL}} \right\rangle]
endsnippet

priority 50

snippet abs "absolute value" "isMath()" Aew
\abs{$1}$0
endsnippet

snippet bra "bra" "isMath()" ew
\bra{$1}$0
endsnippet

snippet ket "ket" "isMath()" ew
\ket{$1}$0
endsnippet

snippet can "cancel" "isMath()" Awe
\cancel{${1:${VISUAL}}}$0
endsnippet

snippet bar "bar" "isMath()" Awe
\overline{${1:${VISUAL}}}$0
endsnippet

snippet til "tilde" "isMath()" ewA
\widetilde{$1}$0
endsnippet

snippet hat "hat" "isMath()" ewA
\hat{${1:${VISUAL}}}$0
endsnippet

snippet dot "dot" "isMath()" ew
\dot{${1:${VISUAL}}}$0
endsnippet

snippet form "set of forms" "isMath()" Awe
\Lambda^{${1:p}}(\mathcal{M})$0
endsnippet

snippet Mat "set of matrices" "isMath()" Awe
\text{Mat}_n(F)
endsnippet

snippet det "determinant" "isMath()" e
\text{det}($1)
endsnippet

snippet :: "normal ordering" "isMath()" eiA
\normalorder{${1:${VISUAL}}}$0
endsnippet

snippet feyn "Feynman diagram" "isMath()" be
\begin{gathered}
	\feynmandiagram[transform shape, scale=1][horizontal=a to b] {
		$1,
	};$0
\end{gathered}
endsnippet

snippet loop "feynman loop" "isMath()" ew
-- [loop, min distance=2cm${1:, in=-135, out=-45}]$0
endsnippet

priority -100

# snippet "(_|\^)([a-zA-Z0-9])" "sub-super swap" "isMath()" er
# `!p
# indicator={"_", "^"} - {match.group(1)}
# snip.rv=indicator.pop()+match.group(2)
# `
# endsnippet

# snippet "(_|\^)({.*?})" "sub-super swap:braces" "isMath()" er
# `!p
# indicator={"_", "^"} - {match.group(1)}
# snip.rv=indicator.pop()+match.group(2)
# `
# endsnippet
#
# snippet "(_|\^)(\\[a-z]*)" "sub-super swap: command" "isMath()" er
# `!p
# indicator={"_", "^"} - {match.group(1)}
# snip.rv=indicator.pop()+match.group(2)
# `
# endsnippet

# --- GREEK INDICES ---

# Define allowe index letter dictionary
global !p
indices = {
  "a": "\\alpha",
  "b": "\\beta",
  "c": "\\chi",
  "d": "\\delta",
  "D": "\\Delta",
  "e": "\\epsilon",
  "ve": "\\varepsilon",
  "f": "\\phi",
  "F": "\\Phi",
  "vf": "\\varphi",
  "g": "\\gamma",
  "G": "\\Gamma",
  "h": "\\eta",
  "i": "\\iota",
  "k": "\\kappa",
  "l": "\\lambda",
  "L": "\\Lambda",
  "m": "\\mu",
  "n": "\\nu",
  "o": "\\omicron",
  "p": "\\pi",
  "P": "\\Pi",
  "r": "\\rho",
  "vr": "\\varrho",
  "s": "\\sigma",
  "S": "\\Sigma",
  "t": "\\tau",
  "w": "\\omega",
  "W": "\\Omega",
  "x": "\\xi",
  "X": "\\Xi",
  "u": "\\upsilon",
  "U": "\\Upsilon",
  "z": "\\zeta",
  "y": "\\psi",
  "Y": "\\Psi",
  "q": "\\theta",
  "Q": "\\Theta",
  "vq": "\\vartheta",
  "+": "\\dagger",  # Hermitian conjugate
  "-": "-1",  # inverse
  "(": "(",
  ")": ")",
  "[": "[",
  "]": "]",
  "|": "|",
  ";": ";",
  ",": ",",
  "'": "\\prime",
}
endglobal

# priority 49
# # greek and other indices with '.'
# snippet "\.([a-zA-Z\[\]\(\),;+-\|]{1,2})" "indices with dot" "isMath()" eiAr
# `!p
# if match.group(1) not in indices.keys():
#   snip.rv=match.group(0)
# else:
#   snip.rv="^{"+indices[match.group(1)]+"}"
# `
# endsnippet
#
# priority 50
# # tensor indices with '..'
# snippet "\.{2}([a-zA-Z\[\]\(\),;+-\|]{1,2})" "indices with dot" "isMath()" eiAr
# \indices{^{`!p
# if match.group(1) not in indices.keys():
#   snip.rv=match.group(0)
# else:
#   snip.rv=indices[match.group(1)]
# `}$1}$0
# endsnippet
#
# priority 51
# #higher prority than "multi indices"
# snippet "(\^|_)({.*)(,|;)};" "switch partial covariant derivative" "isMath()" eiAr
# `!p
# indicator={",", ";"} - {match.group(3)}
# snip.rv=match.group(1)+match.group(2)+indicator.pop()+"}"
# `
# endsnippet
#
# priority 50
# # add greek letters: {\mu}n -> {\mu\nu}
# # add derivatives: {\mu},r -> {\mu,\rho}
# # added primes
# snippet "(\^|_)({.*?)(,|;|\\[a-z]*?|\[|\]|\|)}([a-zA-Z\[\];\|']{1,2})" "multi indices" "isMath()" eiAr
# `!p
# # check if new thing is a valid index
# # If not, just return the whole match
# # i.e. do not change anything
# if match.group(4) not in indices.keys() or match.group(3) not in indices.values():
#   snip.rv=match.group(0)
# else:
#   index=indices[match.group(4)]
#
#   # insert new index letter into the braces
#   snip.rv= match.group(1)+ match.group(2) + match.group(3) + index + "}"
# `
# endsnippet

# Latin indices with ','
# priority higher than greek indices

priority 51
snippet ',([a-zA-Z])' "latin index" "isMath()" eAir
`!p snip.rv = "^{"+match.group(1)+"}"`
endsnippet

priority 52
snippet ',,([a-zA-Z])' "latin tensor" "isMath()" eAir
`!p snip.rv = "\indices{^{"+match.group(1)`}$1}$0
endsnippet

snippet "(\_|\^)({[a-zA-Z']*?)}([a-zA-Z]|')" "multi latin index" "isMath()" eAir
`!p snip.rv = match.group(1) + match.group(2) + match.group(3) + "}"`
endsnippet

priority 50

# math fonts
snippet BS "boldsymbol" "isMath()" Awe
\boldsymbol
endsnippet

snippet '([1A-Z])BB' "Blackboard Bold" "isMath()" eArw
\mathbb{`!p snip.rv = match.group(1)`}
endsnippet

snippet '[a-zA-Z]CAL' "CALligraphic" "isMath()" erA
\mathcal{`!p snip.rv=match.group(0)[0]`}
endsnippet

snippet '[a-zA-Z]SCR' "Super CuRly" "isMath()" erA
\mathscr{`!p snip.rv=match.group(0)[0]`}
endsnippet

# snippet '[a-zA-Z]fr' "Fraktur" "isMath()" erA
# \mathfrak{`!p snip.rv=match.group(0)[0]`}
# endsnippet

snippet '[a-zA-Z]til' "Tilde" "isMath()" erA
\tilde{`!p snip.rv=match.group(0)[0]`}
endsnippet

snippet '[a-zA-Z]hat' "Hat" "isMath()" erAw
\hat{`!p snip.rv=match.group(0)[0]`}
endsnippet

# snippet '([a-zA-Z]{1,2})LA' "Lie Algebra" "isMath()" erA
# \mathfrak{`!p snip.rv=match.group(1)`}${2:_{\mathbb{C}}}(${1:\mathcal{M}})$0
# endsnippet

snippet | "such that" "isMath()" eAw
\suchthat
endsnippet

# --- GILLES CASTEL ---
snippet => "implies" Ai
\implies
endsnippet

snippet =< "implied by" Ai
\impliedby
endsnippet

snippet mk "Math" wA
$${1}$`!p
if t[2] and t[2][0] not in [',', '.', '?', '-', ' ']:
	snip.rv = ' '
else:
	snip.rv = ''
`$0
endsnippet

snippet dm "Math" wA
\[
${1:${VISUAL}}
.\] $0
endsnippet

snippet '((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)/' "Fraction" "isMath()" wrAe
\\frac{`!p snip.rv = match.group(1)`}{$1}$0
endsnippet


priority -100
snippet '(.)([a-zA-Z]|}|\))(\d)' "Auto Index" "isMath()" eAr
`!p
# The following line prevents \c1 -> \c_1 for simpler-wick
if match.group(1) == "\\":
  snip.rv=match.group(0)
else:
  snip.rv = match.group(1) + match.group(2) + "^" + match.group(3)`
endsnippet

priority 50

# snippet '(_|\^)(\d)(\d)' "Auto Second Index" "isMath()" eAr
# `!p
# indicator={"_", "^"} - {match.group(1)}
# snip.rv = match.group(1) + match.group(2) + indicator.pop() + match.group(3)`
# endsnippet

#snippet '([a-zA-Z])_(\d\d)' "Auto Multi Index" "isMath()" eAwr
#`!p snip.rv = match.group(1) + "_{" + match.group(2) + "}"`
#endsnippet

snippet "([a-zA-Z0])(,\.|\.,)" "Vector postfix" "isMath()" eriA
\vb{`!p snip.rv=match.group(1)`}
endsnippet


# Evaluate expression with sympy as backend
snippet sympy "sympy block " w
sympy $1 sympy$0
endsnippet

priority 10000
snippet 'sympy(.*)sympy' "evaluate sympy" wr
`!p
from sympy import *
x, y, z, t = symbols('x y z t')
k, m, n = symbols('k m n', integer=True)
f, g, h = symbols('f g h', cls=Function)
init_printing()
snip.rv = eval('latex(' + match.group(1).replace('\\', '') \
    .replace('^', '**') \
    .replace('{', '(') \
    .replace('}', ')') + ')')
`
endsnippet

####################### Experimental ############

# Evaluate expression with Mathematica as backend
priority 1000
snippet math "mathematica block" w
math $1 math$0
endsnippet

priority 10000
snippet 'math(.*)math' "evaluate mathematica" wr
`!p
import subprocess
code = 'ToString[' + match.group(1) + ', TeXForm]'
snip.rv = subprocess.check_output(['wolframscript', '-code', code])
`
endsnippet


# New snippets
snippet vec "vector" "isMath()" eAw
\\vec{$1}$0
endsnippet

snippet cdot "cdot" Aw
\\cdot $0
endsnippet

snippet equiv "equiv" Aw
\\equiv $0
endsnippet

# Matrix
snippet mat "smart matrix environment"
\\begin{${1:p/b/v/V/B/small}matrix}
${0:${VISUAL}}
\\end{$1matrix}
endsnippet

snippet nn "nonumber"
\nonumber $0
endsnippet
